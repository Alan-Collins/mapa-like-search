theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + expand_limits(x = 0, y = 0) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + #scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(expand = c(0, 17000)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,17000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,18000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,20000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,16500), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = pseudomonas, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,16500), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +  geom_density(alpha=0.25)
View(pseudomonas)
ggplot(data = pseudomonas, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,7000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +  geom_density(alpha=0.25)
ggplot(data = pseudomonas, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,8000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +  geom_density(alpha=0.25)
pseudomonas.single <- single.rtx[ grepl( "Pseudomonas" , single.rtx$organism ), ]
pseudomonas.multi <- multiple.rtx[ grepl( "Pseudomonas" , multiple.rtx$organism ), ]
ggplot(data = pseudomonas.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,8000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = pseudomonas.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Pseudomonas substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("Pseudomonas substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
View(pseudomonas.single)
ggplot(data = pseudomonas.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,12000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = pseudomonas.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Pseudomonas substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
ggsave("Pseudomonas substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
View(protein.count)
View(pseudomonas.multi)
as.factor(multiple.rtx$organism)
levels(as.factor(multiple.rtx$organism))
multi.organisms <- as.character(levels(as.factor(multiple.rtx$organism)))
multi.organisms$Adhesin.num <- NULL
multi.organisms <- as.character(levels(as.factor(multiple.rtx$organism)))
multiple.rtx$Adhesin.num <- NULL
multiple.rtx$Adhesin.num <- z
multiple.rtx$Adhesin.num <- "z"
View(multiple.rtx)
multiple.rtx$Adhesin.num <- NULL
z
multiple.rtx$Adhesin.num <- "z"
for (i in length(multi.organisms){
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
#  for ( j in length(which(multiple.rtx$organism == org) == TRUE)){
print(multiple.rtx$protein.length[which(multiple.rtx$organism == org)])
#  }
# sizes.ord <- order(mutiple.rtx$protein.size[] decreasing = TRUE)
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- order(multiple.rtx$protein.length[which(multiple.rtx$organism == org)], decreasing = TRUE)
print(sizes)
#  }
# sizes.ord <- order(mutiple.rtx$protein.size[] decreasing = TRUE)
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print(sizes)
#  }
# sizes.ord <- order(mutiple.rtx$protein.size[] decreasing = TRUE)
}
length(multiple.organisms)
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
for ( j in length(sizes)){
which(multiple.rtx$organism == org AND multiple.rtx$protein.length == sizes[j]) #multiple.rtx$Adhesin.num[
}
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
for ( j in length(sizes)){
which(multiple.rtx$organism == org)#  multiple.rtx$protein.length == sizes[j]) #multiple.rtx$Adhesin.num[
}
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
for ( j in length(sizes)){
which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j]) #multiple.rtx$Adhesin.num[
}
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
for ( j in length(sizes)){
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
for ( j in length(sizes)){
print("j = ", j)
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
for (i in length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print("sizes = ", length(sizes))
for ( j in length(sizes)){
print("j = ", j)
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
for (i in c(1:3))){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print("sizes = ", length(sizes))
for ( j in length(sizes)){
print("j = ", j)
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
for (i in c(1:3)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print("sizes = ", length(sizes))
for ( j in length(sizes)){
print("j = ", j)
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
for (i in c(1:3)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print(paste("sizes = ", length(sizes)))
for ( j in length(sizes)){
print(paste("j = ", j))
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
for (i in c(1:3)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print(paste("sizes = ", length(sizes)))
for ( j in 1:length(sizes)){
print(paste("j = ", j))
print(which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])) #multiple.rtx$Adhesin.num[
}
}
multi.organisms <- as.character(levels(as.factor(multiple.rtx$organism)))
length(multiple.organisms)
multi.organisms <- as.character(levels(as.factor(multiple.rtx$organism)))
length(multi.organisms)
for (i in 1:length(multi.organisms)){
org <- multi.organisms[i]
sizes <- NULL
sizes <- multiple.rtx$protein.length[which(multiple.rtx$organism == org)]
sizes <- sizes[order(sizes, decreasing = TRUE)]
print(paste("sizes = ", length(sizes)))
for ( j in 1:length(sizes)){
print(paste("j = ", j))
multiple.rtx$Adhesin.num[which(multiple.rtx$organism == org & multiple.rtx$protein.length == sizes[j])] <- j
}
}
biggest.rtx <- multiple.rtx[which(multiple.rtx$Adhesin.num == 1),]
View(biggest.rtx)
ggplot(data = multiple.rtx, aes(protein.legth, fill = "Number of RTX proteins"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
library(ggplot2);library(reshape2)
ggplot(data = multiple.rtx, aes(protein.legth, fill = "Number of RTX proteins"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,16500), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "") +
# ggsave("overall substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
ggplot(data = multiple.rtx, aes(protein.legth, fill = "Number of RTX proteins"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,16500), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(data = single.rtx, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "All substrate size distributions", x = "Protein Length", y = "Density", fill = "")
ggplot(data = multiple.rtx, aes(protein.legth, fill = "Number of RTX proteins"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(protein.length, fill = "Number of RTX proteins"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_violin()
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()+
geom_jitter(stat = organism, alpha = 0.25)
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()+
geom_jitter(stat = "organism", alpha = 0.25)
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()+
geom_jitter(stat = multiple.rtx$organism, alpha = 0.25)
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()+
geom_jitter(aes(colour = multiple.rtx$organism, alpha = 0.25))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
#  geom_boxplot()+
geom_jitter(aes(colour = multiple.rtx$organism, alpha = 0.25))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
#  geom_boxplot()+
geom_jitter(aes(colour = multiple.rtx$organism, alpha = 0.25))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.25))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1, colour = "blue"))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1, colour = "Blue"))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1, colour = "red"))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1, color = "blue"))
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1), color = "blue")
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1), color = "light_blue")
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1), color = "lightblue")
doubles <-protein.count[protein.count$Var1[which(protein.count$Freq == 2)],]
double.rtx <- substrates.unique[which(substrates.unique$organism == doubles$Var1[1]),]
for ( i in 2: length(doubles$Var1)){
double.rtx <- rbind(double.rtx, substrates.unique[which(substrates.unique$organism == doubles$Var1[i]),])
}
View(double.rtx)
View(doubles)
View(double.rtx)
doubles$ratio <- 0
for(i in 1: length(doubles$Var1)){
sizes <- double.rtx$protein.length[which(double.rtx$organism == doubles$Var1[i])]
sizes <- sizes[order(sizes, decreasing = TRUE)]
doubles$ratio <- sizes[1]/sizes[2]
}
for(i in 1: length(doubles$Var1)){
sizes <- double.rtx$protein.length[which(double.rtx$organism == doubles$Var1[i])]
sizes <- sizes[order(sizes, decreasing = TRUE)]
doubles$ratio[i] <- sizes[1]/sizes[2]
}
ggplot(data = doubles, aes(ratio))+
geom_density()
ggplot(data = doubles, aes(ratio))+
geom_jitter()
doubles$biggest <- 0
doubles$smallest <- 0
for(i in 1: length(doubles$Var1)){
sizes <- double.rtx$protein.length[which(double.rtx$organism == doubles$Var1[i])]
sizes <- sizes[order(sizes, decreasing = TRUE)]
doubles$ratio[i] <- sizes[1]/sizes[2]
doubles$biggest <- sizes[1]
doubles$smallest <- sizes[2]
}
ggplot(data = doubles, aes(biggest, ratio))+
geom_jitter()
for(i in 1: length(doubles$Var1)){
sizes <- double.rtx$protein.length[which(double.rtx$organism == doubles$Var1[i])]
sizes <- sizes[order(sizes, decreasing = TRUE)]
doubles$ratio[i] <- sizes[1]/sizes[2]
doubles$biggest[i] <- sizes[1]
doubles$smallest[i] <- sizes[2]
}
ggplot(data = doubles, aes(biggest, ratio))+
geom_jitter()
ggplot(data = doubles, aes(biggest, smallest)) +
geom_jitter()
ggplot(data = doubles, aes(ratio)) +
geom_boxplot()
ggplot(data = doubles, aes("a", ratio)) +
geom_boxplot()
ggplot(data = doubles, aes("a", ratio)) +
geom_boxplot()+
geom_jitter(aes(alpha = 0.1), color = "lightblue")
ggplot(data = multiple.rtx, aes(Adhesin.num, protein.length, fill = Adhesin.num))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), legend.position="none",
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot() +
geom_jitter(aes(alpha = 0.1), color = "lightblue")+
ggsave("All RTX proteins boxplot by size rank in org.png")
ggplot(data = doubles, aes("a", ratio)) +
geom_boxplot()+
geom_jitter(aes(alpha = 0.1), color = "lightblue")+
geom_save("Ratios in double RTX organisms")
ggplot(data = doubles, aes("a", ratio)) +
geom_boxplot()+
geom_jitter(aes(alpha = 0.1), color = "lightblue")+
ggsave("Ratios in double RTX organisms")
ggplot(data = doubles, aes("a", ratio)) +
geom_boxplot()+
geom_jitter(aes(alpha = 0.1), color = "lightblue")+
ggsave("Ratios in double RTX organisms.png")
ggplot(data = doubles, aes("a", ratio)) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_boxplot()+
geom_jitter(aes(alpha = 0.1), color = "lightblue")+
ggsave("Ratios in double RTX organisms.png")
View(substrates2)
lapGD.organisms<-unique(intersect(pSUM.lapG$ORG,pSUM.lapD$ORG)) #select organisms found on both lists. 3592 automatically removes replcates so no need for unique function.
View(substrates.unique)
View(substrates2)
aeromonas.multi <- multiple.rtx[ grepl( "Aeromonas" , multiple.rtx$organism ), ]
aeromonas.single <- single.rtx[ grepl( "Aeromonas" , single.rtx$organism ), ]
ggplot(data = aeromonas.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,12000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = aeromonas.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Aeromonas substrate size distributions", x = "Protein Length", y = "Density", fill = "")
Shewanella.multi <- multiple.rtx[ grepl( "Shewanella" , multiple.rtx$organism ), ]
Shewanella.single <- single.rtx[ grepl( "Shewanella" , single.rtx$organism ), ]
ggplot(data = Shewanella.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,12000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = Shewanella.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Shewanella substrate size distributions", x = "Protein Length", y = "Density", fill = "")
ggplot(data = Shewanella.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,12000), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = Shewanella.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Shewanella substrate size distributions", x = "Protein Length", y = "Density", fill = "")
View(Shewanella.single)
View(Shewanella.multi)
ggplot(data = Shewanella.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,16500), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = Shewanella.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Shewanella substrate size distributions", x = "Protein Length", y = "Density", fill = "")
ggsave("Shewanella substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
View(substrates.unique)
Vibrio.multi <- multiple.rtx[ grepl( "Vibrio" , multiple.rtx$organism ), ]
Vibrio.single <- single.rtx[ grepl( "Vibrio" , single.rtx$organism ), ]
ggplot(data = Vibrio.multi, aes(protein.length, fill = 'multiple RTX')) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
geom_density(alpha=0.25) + scale_x_continuous(limits = c(0,16500), expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
geom_density(alpha=0.25)+
geom_density(data = Vibrio.single, aes(protein.length, fill = 'single RTX'), alpha=0.25) +
labs(title = "Vibrio substrate size distributions", x = "Protein Length", y = "Density", fill = "")+
ggsave("Vibrio substrate sizes.png", width = 20, height = 10, units = "cm", dpi = 300)
View(Vibrio.single)
